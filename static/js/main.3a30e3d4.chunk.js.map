{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["BASE_NAME","unityContext","UnityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","spawnEnemies","send","App","useState","isGameOver","setIsGameOver","userName","setUserName","score","setScore","useEffect","on","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAIMA,EAAY,yBAEZC,EAAe,IAAIC,eAAa,CACpCC,UAAU,GAAD,OAAKH,EAAL,aACTI,QAAQ,GAAD,OAAKJ,EAAL,QACPK,aAAa,GAAD,OAAKL,EAAL,gBACZM,QAAQ,GAAD,OAAKN,EAAL,UAGT,SAASO,IACPN,EAAaO,KAAK,OAAQ,eAAgB,KAyB7BC,MAtBf,WACE,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0BJ,mBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAUA,OARAC,qBAAU,WACRhB,EAAaiB,GAAG,YAAY,SAAUL,EAAUE,GAC9CH,GAAc,GACdE,EAAYD,GACZG,EAASD,QAEV,IAGD,gCACE,wBAAQI,QAASZ,EAAjB,6BACgB,IAAfI,GAAuB,iDAAkBE,EAAlB,YAA8BE,EAA9B,aACxB,cAAC,IAAD,CAAOd,aAAcA,QCtBZmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3a30e3d4.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\n\nconst BASE_NAME = 'unity3d/Build/unity3d.';\n\nconst unityContext = new UnityContext({\n  loaderUrl: `${BASE_NAME}loader.js`,\n  dataUrl: `${BASE_NAME}data`,\n  frameworkUrl: `${BASE_NAME}framework.js`,\n  codeUrl: `${BASE_NAME}wasm`,\n});\n\nfunction spawnEnemies() {\n  unityContext.send(\"Cube\", \"SpawnEnemies\", 100);\n}\n\nfunction App() {\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [userName, setUserName] = useState(\"\");\n  const [score, setScore] = useState(0);\n\n  useEffect(function () {\n    unityContext.on(\"GameOver\", function (userName, score) {\n      setIsGameOver(true);\n      setUserName(userName);\n      setScore(score);\n    });\n  }, []);\n\n  return (\n    <div>\n      <button onClick={spawnEnemies}>Spawn a bunch!</button>\n      {isGameOver === true && <p>{`Game Over! ${userName} ${score} points`}</p>}\n      <Unity unityContext={unityContext} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}